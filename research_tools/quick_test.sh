#!/bin/bash
# Quick test script to demonstrate the service documentation system
# Run this to see examples without consuming API tokens

echo "=========================================="
echo "SERVICE DOCUMENTATION SYSTEM - TEST EXAMPLES"
echo "=========================================="
echo ""
echo "This script shows you how to use the research tools."
echo "To actually run them, you need to:"
echo "  1. Install: pip install anthropic"
echo "  2. Set API key: export ANTHROPIC_API_KEY='your-key'"
echo ""
echo "=========================================="
echo "EXAMPLE 1: Generate Service Documentation"
echo "=========================================="
echo ""
echo "Command:"
echo "  python service_doc_generator.py 2020 Chevrolet \"Silverado 1500\" \"Brake Pads Replacement (Front)\""
echo ""
echo "What it does:"
echo "  • Researches brake pad replacement procedure for 2020 Silverado"
echo "  • Generates torque specs, parts list, step-by-step instructions"
echo "  • Caches result for instant future lookups"
echo "  • Cost: ~\$0.10-0.20 first time, \$0.00 cached"
echo ""
echo "=========================================="
echo "EXAMPLE 2: Find Torque Specifications"
echo "=========================================="
echo ""
echo "Command:"
echo "  python torque_spec_finder.py 2019 Ford F-150 \"wheel lug nuts\""
echo ""
echo "What it does:"
echo "  • Quick lookup of wheel lug nut torque specs"
echo "  • Provides imperial (ft-lbs) and metric (Nm)"
echo "  • Includes tightening pattern and warnings"
echo "  • Cost: ~\$0.05-0.10"
echo ""
echo "=========================================="
echo "EXAMPLE 3: Electrical Diagnostics"
echo "=========================================="
echo ""
echo "Command:"
echo "  python wiring_diagram_helper.py 2018 Honda Civic \"fuel pump\" \"no start\""
echo ""
echo "What it does:"
echo "  • Generates electrical diagnostic procedure"
echo "  • Provides fuse/relay locations, wire colors"
echo "  • Step-by-step voltage/resistance tests"
echo "  • Common failure points and solutions"
echo "  • Cost: ~\$0.20-0.40"
echo ""
echo "=========================================="
echo "COST COMPARISON"
echo "=========================================="
echo ""
echo "ALLDATA Subscription:     \$1,800-2,500/year"
echo "ProDemand Subscription:   \$2,400-3,600/year"
echo ""
echo "This AI System:"
echo "  Setup cost:             \$0"
echo "  Per document:           \$0.05-0.40"
echo "  Cached lookups:         \$0.00"
echo "  Estimated annual:       \$50-200"
echo ""
echo "Break-even: ~50-100 unique documents"
echo ""
echo "=========================================="
echo "CACHED DOCUMENTATION"
echo "=========================================="
echo ""
echo "Check if any documentation has been generated:"
if [ -d "../service_docs" ]; then
    doc_count=$(find ../service_docs -name "*.json" 2>/dev/null | wc -l)
    echo "  Cached documents found: $doc_count"
    if [ $doc_count -gt 0 ]; then
        echo ""
        echo "  Example cached documents:"
        find ../service_docs -name "*.json" 2>/dev/null | head -5 | while read file; do
            echo "    • $file"
        done
    fi
else
    echo "  No cached documents yet (service_docs/ doesn't exist)"
    echo "  Documents will be cached after first generation"
fi
echo ""
echo "=========================================="
echo "NEXT STEPS"
echo "=========================================="
echo ""
echo "1. Install dependencies:"
echo "   pip install anthropic"
echo ""
echo "2. Get API key from https://console.anthropic.com"
echo ""
echo "3. Set environment variable:"
echo "   export ANTHROPIC_API_KEY='your-key-here'"
echo ""
echo "4. Try generating a document:"
echo "   python service_doc_generator.py 2020 Toyota Camry \"Oil and Filter Change\""
echo ""
echo "5. Check the cached result:"
echo "   ls -la ../service_docs/toyota/camry_2020/"
echo ""
echo "=========================================="
echo ""
